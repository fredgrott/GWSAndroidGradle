/*
 * Copyright (C) 2016 Fred Grott(aka shareme GrottWorkShop)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under License.
 */
apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'de.hannesstruss.godot'
apply plugin: 'hugo'
apply plugin: 'spoon'
apply plugin: 'org.moallemi.advanced-build-version'
apply plugin: 'org.lucasr.probe'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'jacoco-everywhere'

advancedVersioning {
    nameOptions {
        versionMajor 1
        versionBuild 0
    }
    codeOptions {
        versionCodeType org.moallemi.gradle.internal.VersionCodeType.DATE

        dependsOnTasks 'release'

    }
    //if flavors than re use nameFormat to include the flavorName
    outputOptions {
        renameOutput true
        nameFormat '$projectName-$appName-$buildType-$flavorName-$versionName-$versionCode'

    }
}

def appVersionName = advancedVersioning.versionName
def appVersionCode = advancedVersioning.versionCode

/*
 We define some buildConfigField defs here to use
 */
def BOOLEAN = "boolean"
def TRUE = "true"
def FALSE = "false"
def LOG_HTTP_REQUESTS = "LOG_HTTP_REQUESTS"
def REPORT_CRASHES = "REPORT_CRASHES"
def ENABLE_VIEW_SERVER = "ENABLE_VIEW_SERVER"
def ENABLE_SHARING = "ENABLE_SHARING"

def DEBUG_VIEW = "DEBUG_VIEW"
def DEBUG_DATA = "DEBUG_DATA"
def DEBUG_DESIGN = 'DEBUG_DESIGN'





android {
    /*
    Sets-up a sharedTest folder to store test code that can
    be shared between test, androidTest, and androidTestMock
     */
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
        androidTestMock {
            java.srcDir sharedTestDir
        }
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")


    defaultConfig {
        applicationId "com.github.shareme.gwsandroidgradle.flavoredapp"
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        //noinspection GroovyAssignabilityCheck
        versionCode appVersionCode
        //noinspection GroovyAssignabilityCheck
        versionName appVersionName
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")


    }
    /*
     Warning, multi-catch is not until android 4.4.2
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/quality/androidlint/lint.xml")
        htmlOutput file("${project.buildDir}/reports/lint/lint-results.html")
        xmlOutput file("${rootProject.buildDir}/reports/lint/lint-results.xml")
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    signingConfigs {

        //release {
        //props stored in gradle.properties at userhome .gradle subfolder
        // for product release and you just substitute the correct vars
        // otherwise for demo of libs use what is listed

        //storeFile file(FREDGROTT_RELEASE_STORE_FILE)
        //storePassword FREDGROTT_RELEASE_STORE_PASSWORD
        //keyAlias FREDGROTT_RELEASE_KEY_ALIAS
        //keyPassword FREDGROTT_RELEASE_KEY_PASSWORD

        // }

        myDemo{
            storeFile file('../buildsystem/demokey.jks')
            storePassword 'droiddroid'
            keyAlias 'dkey'
            keyPassword 'droiddroid'
        }

    }

    //noinspection GroovyMissingReturnStatement,GroovyMissingReturnStatement
    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE
            buildConfigField BOOLEAN, REPORT_CRASHES, FALSE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, TRUE
            buildConfigField BOOLEAN, ENABLE_SHARING, TRUE

            buildConfigField "String", "BUILD_TIME", "\"${rootProject.ext.buildTime}\""



        }

        /*
        Just for the probe views and layout and transverse tool and I limit its
        use to just the view product flavor
         */
        //noinspection GroovyAssignabilityCheck
        probedebug.initWith(buildTypes.debug)
        probedebug{

        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-matches-android-optimize.pro'
            //if its app demo of library than it gets
            //signingConfig signingConfigs.myDemo
            //other wise it gets an uncommented signingConfigs.release
            //with the right product key pertaining to whether its on the Ci server or not
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.myDemo
            applicationIdSuffix '.release'
            versionNameSuffix '-release'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE
            buildConfigField BOOLEAN, REPORT_CRASHES, TRUE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, FALSE
            buildConfigField BOOLEAN, ENABLE_SHARING, FALSE




        }

    }
    /*
    Data, Design, and View product flavors get certain debug libraries loaded
    via their debugProductFlavorCompile dep entries to enable a specific
    debug tool bar that only shows for that product flavor when run on emulator
    or device.
     */
    //noinspection GroovyMissingReturnStatement
    productFlavors {
        /*
        Enables mocking during instrument testing
         */
        mock {
            //its suppose to be fixed in android gradle 1.4 with only
            //needing to use applicationIdSuffix
            buildTypes.debug.applicationIdSuffix = ".mock"
        }
        /*
        This is the main point for the android dev as prodDebug and prodRelease
        as far as how builds flow through with mock on mock and different debugging
        scopes on the appropriate product flavors
         */
        prod {

        }
        //so that we can do some design grid and design sketch overlays, etc
        design {
            buildTypes.debug.applicationIdSuffix = '.design'
            buildConfigField BOOLEAN, DEBUG_DESIGN, TRUE
            // design apk gets distributed to design staff for feedback on
            // UI design progress, etc thus we need to sign with
            // demo key so that its easier to load in devices
            // for design staff
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.myDemo
        }
        data {

            buildConfigField BOOLEAN, DEBUG_DATA, TRUE
        }
        view {

            buildConfigField BOOLEAN, DEBUG_VIEW, TRUE
        }
    }


    /*
    Note, that we run all our instrumented tests using Spoon so we have a
    testVariant for every product flavor but do not always rung instrumented
    tests for every product flavor:

     */
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('design')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('data')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('view')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('probedebug')
                && variant.getFlavors().get(0).name.equals('mock')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('probedebug')
                && variant.getFlavors().get(0).name.equals('design')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('probedebug')
                && variant.getFlavors().get(0).name.equals('data')){
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('probedebug')
                && variant.getFlavors().get(0).name.equals('prod')){
            variant.setIgnore(true);
        }
    }
    // Always show the result of every unit test, even if it passes.
    testOptions{
        reportDir = "$rootProject.ext.ourReportsDir/androidTests"

        unitTests.all {

            // test events logged and sent to console
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

}
//noinspection GroovyMissingReturnStatement
spoon {

    debug = true

    baseOutputDir = file("$rootProject.ext.ourReportsDir/spoon")

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }

}
probe {
    buildVariants {
        probedebug {
            enabled = true
        }
    }
}
dexcount {
   includeClasses = false
   includeFieldCount = true
   //includeTotalMethodCount = false
   printAsTree = false
   orderByMethodCount = false
   verbose = false
}
//espresso runner always has the wrong support-annotations version so
//we force it here
//noinspection GroovyAssignabilityCheck
configurations.all{
    //noinspection GroovyAssignabilityCheck
    resolutionStrategy.force 'com.android.support:support-annotations:23.1.1'
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.junit
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.mockito
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.powermockJunit
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.powermockMockito
    //noinspection GroovyAssignabilityCheck
    testCompile rootProject.ext.tddDependencies.assertjJunitCore
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoRunner


    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoRules
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.espressoCore

    androidTestCompile (rootProject.ext.instrumentedDependencies.assertjAndroid){
        exclude group: 'com.android.support'
    }
    androidTestCompile (rootProject.ext.instrumentedDependencies.assertjAppCompat){
        exclude group: 'com.android.support'
    }
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.spoonClient
    //noinspection GroovyAssignabilityCheck
    androidTestCompile rootProject.ext.instrumentedDependencies.gwsdroidinsutil

    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.androidSupportDependencies.appCompat
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.logDependencies.timber
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.eventbusDependencies.otto
    //noinspection GroovyAssignabilityCheck
    compile rootProject.ext.appDebugDependencies.leakCanaryReleaseCompile

    //noinspection GroovyAssignabilityCheck
    debugCompile rootProject.ext.appDebugDependencies.leakCanaryDebugCompile
    //noinspection GroovyAssignabilityCheck
    debugCompile rootProject.ext.databaseDebugDependencies.dbinspector
    //noinspection GroovyAssignabilityCheck
    debugCompile rootProject.ext.appDebugDependencies.gwsdroidviewserver

    //noinspection GroovyAssignabilityCheck
    apt rootProject.ext.lombokDependencies.lombok
    //noinspection GroovyAssignabilityCheck
    provided rootProject.ext.lombokDependencies.lombok
}
//uncomment to enable
// androidTest gets a class named SystemAnimations and animations disabled and enabled within
// the ApplicationTest setUp and tearDown
// an AndroidManifest.xml stripped of its application tag is
task grantAnimationPermission(type: Exec, dependsOn: 'installDebug') { // or install{productFlavour}{buildType}
    commandLine "adb shell pm grant $android.defaultConfig.testApplicationId android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest')) {
        //noinspection GroovyAssignabilityCheck
        task.dependsOn grantAnimationPermission
    }
}

